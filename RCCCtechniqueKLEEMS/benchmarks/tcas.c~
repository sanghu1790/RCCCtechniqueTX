#ifdef LLBMC
#include <llbmc.h>
#else
#include <klee/klee.h>
#endif
int main( )
{

signed int Cur_Vertical_Sep;
signed int High_Confidence;
signed int Two_of_Three_Reports_Valid;
signed int Own_Tracked_Alt;
signed int Own_Tracked_Alt_Rate;
signed int Other_Tracked_Alt;
signed int Alt_Layer_Value;
signed int Positive_RA_Alt_Thresh__0 ;
signed int Positive_RA_Alt_Thresh__1 ;
signed int Positive_RA_Alt_Thresh__2 ;
signed int Positive_RA_Alt_Thresh__3 ;
signed int Up_Separation;
signed int Down_Separation;
signed int Other_RAC;
signed int Other_Capability;
signed int Climb_Inhibit;

  klee_make_symbolic(&Cur_Vertical_Sep, sizeof(signed int), "Cur_Vertical_Sep");
  klee_make_symbolic(&High_Confidence, sizeof(signed int), "High_Confidence");
  klee_make_symbolic(&Two_of_Three_Reports_Valid, sizeof(signed int), "Two_of_Three_Reports_Valid");
  klee_make_symbolic(&Own_Tracked_Alt, sizeof(signed int), "Own_Tracked_Alt");
  klee_make_symbolic(&Own_Tracked_Alt_Rate, sizeof(signed int), "Own_Tracked_Alt_Rate");
  klee_make_symbolic(&Other_Tracked_Alt, sizeof(signed int), "Other_Tracked_Alt");
  klee_make_symbolic(&Alt_Layer_Value, sizeof(signed int), "Alt_Layer_Value");
  klee_make_symbolic(&Positive_RA_Alt_Thresh__0, sizeof(signed int), "Positive_RA_Alt_Thresh__0");
  klee_make_symbolic(&Positive_RA_Alt_Thresh__1, sizeof(signed int), "Positive_RA_Alt_Thresh__1");
  klee_make_symbolic(&Positive_RA_Alt_Thresh__2, sizeof(signed int), "Positive_RA_Alt_Thresh__2");
  klee_make_symbolic(&Positive_RA_Alt_Thresh__3, sizeof(signed int), "Positive_RA_Alt_Thresh__3");
  klee_make_symbolic(&Up_Separation, sizeof(signed int), "Up_Separation");
  klee_make_symbolic(&Down_Separation, sizeof(signed int), "Down_Separation");
  klee_make_symbolic(&Other_RAC, sizeof(signed int), "Other_RAC");
  klee_make_symbolic(&Other_Capability, sizeof(signed int), "Other_Capability");
  klee_make_symbolic(&Climb_Inhibit, sizeof(signed int), "Climb_Inhibit");
  
  signed int enabled, tcas_equipped, intent_not_known;
  signed int need_upward_RA, need_downward_RA;
  signed int alt_sep;
  signed int alim;
  
  signed int temp1,temp2,temp3,temp4;
  signed int result_Non_Crossing_Biased_Climb;
  signed int result_Non_Crossing_Biased_Descend;   
  klee_make_symbolic(&enabled, sizeof(signed int), "enabled");
  klee_make_symbolic(&tcas_equipped, sizeof(signed int), "tcas_equipped");
  klee_make_symbolic(&intent_not_known, sizeof(signed int), "intent_not_known");
  klee_make_symbolic(&need_upward_RA, sizeof(signed int), "need_upward_RA");
  klee_make_symbolic(&need_downward_RA, sizeof(signed int), "need_downward_RA");
  klee_make_symbolic(&alt_sep, sizeof(signed int), "alt_sep");
  klee_make_symbolic(&alim, sizeof(signed int), "alim");
  klee_make_symbolic(&temp1, sizeof(signed int), "temp1");
  klee_make_symbolic(&temp2, sizeof(signed int), "temp2");
  klee_make_symbolic(&temp3, sizeof(signed int), "temp3");
  klee_make_symbolic(&temp4, sizeof(signed int), "temp4");      
  klee_make_symbolic(&result_Non_Crossing_Biased_Climb, sizeof(signed int), "result_Non_Crossing_Biased_Climb");
  klee_make_symbolic(&result_Non_Crossing_Biased_Descend, sizeof(signed int), "result_Non_Crossing_Biased_Descend");


  Positive_RA_Alt_Thresh__0 = 400;
  Positive_RA_Alt_Thresh__1 = 500;
  Positive_RA_Alt_Thresh__2 = 640;
  Positive_RA_Alt_Thresh__3 = 740;

  
  enabled=0;
  tcas_equipped=0;
  intent_not_known=0;
  need_upward_RA=0;
  need_downward_RA=0;
      

  if ( Alt_Layer_Value == 0 ){
    alim = Positive_RA_Alt_Thresh__0 ;
  }  
  if ( Alt_Layer_Value == 1 ){
    alim = Positive_RA_Alt_Thresh__1 ;
  }  
  if ( Alt_Layer_Value == 2 ){
    alim = Positive_RA_Alt_Thresh__2 ;
  }
  alim = Positive_RA_Alt_Thresh__3 ;
  

  if ( (High_Confidence !=0) && (Own_Tracked_Alt_Rate <= 600) && (Cur_Vertical_Sep > 600)) {
    enabled = 1 ;
    
  }

  if ( Other_Capability == 0 ){
    tcas_equipped = 1 ;
        
  }
  if ( (Two_of_Three_Reports_Valid !=0 ) && Other_RAC == 0 ){
    intent_not_known = 1 ;
    
  }
  alt_sep = 0;
  

  if ((enabled !=0)&& (((tcas_equipped !=0)&& (intent_not_known !=0)) || !(tcas_equipped !=0)))
    {
      //////////////////////////////////////////////////////////////////////////////
       { 
	signed int upward_preferred_1;
	signed int alim_Non_Crossing_Biased_Climb;
	signed int temp11,temp12,temp13;

	klee_make_symbolic(&upward_preferred_1, sizeof(signed int), "upward_preferred_1");
	klee_make_symbolic(&alim_Non_Crossing_Biased_Climb, sizeof(signed int), "alim_Non_Crossing_Biased_Climb");
	klee_make_symbolic(&temp11, sizeof(signed int), "temp11");
	klee_make_symbolic(&temp12, sizeof(signed int), "temp12");
	klee_make_symbolic(&temp13, sizeof(signed int), "temp13");

	upward_preferred_1 = 0 ;
	result_Non_Crossing_Biased_Climb=0;
	

	if ( Alt_Layer_Value == 0 ){
	  alim_Non_Crossing_Biased_Climb =  Positive_RA_Alt_Thresh__0 ;
	  
	}  
	if ( Alt_Layer_Value == 1 ){
	  alim_Non_Crossing_Biased_Climb = Positive_RA_Alt_Thresh__1 ;
	  
	}  
	if ( Alt_Layer_Value == 2 ){
	  alim_Non_Crossing_Biased_Climb =  Positive_RA_Alt_Thresh__2 ;
	  
	}  
	alim_Non_Crossing_Biased_Climb =  Positive_RA_Alt_Thresh__3 ;
	

	
	if (Climb_Inhibit==1) {temp11= Up_Separation + 100; }
	else {temp11 = Up_Separation; }
	

	if (temp11 > Down_Separation ){
	  upward_preferred_1 = 1 ;
	  
	}  

	if (upward_preferred_1==1)
	  {
	
	    if (Own_Tracked_Alt < Other_Tracked_Alt){
	      temp12 = 1 ;
	      
	    }else{
	      temp12 = 0 ;
	      
	    }  
	    if ( !(temp12 !=0 ) || ((temp12 !=0 )&& (!(Down_Separation >= alim_Non_Crossing_Biased_Climb))) ){
	      result_Non_Crossing_Biased_Climb = 1 ;
	      
	    }
	  }
	else
	  {
	
	    if (Other_Tracked_Alt < Own_Tracked_Alt){
	      temp13 =  1 ;
	      
	    }else{
	      temp13 = 0 ;
	      
	    }  
	    if ( (temp13 !=0 ) && (Cur_Vertical_Sep >= 300) && (Up_Separation >= alim_Non_Crossing_Biased_Climb) ){
	      result_Non_Crossing_Biased_Climb = 1 ;
	      
	    }  
	  }
      }  
      temp1 = result_Non_Crossing_Biased_Climb;
      
      
      if (Own_Tracked_Alt < Other_Tracked_Alt){
	temp2= 1 ;
	
      }else{
	temp2 = 0 ;
	
      }
	
      if ( (temp1 !=0) && (temp2 !=0 ) ){
	need_upward_RA = 1 ;
	
      }	

      
      {
	
	signed int upward_preferred_2;
	signed int alim_Non_Crossing_Biased_Descend;
	signed int temp21,temp22,temp23;
	klee_make_symbolic(&upward_preferred_2, sizeof(signed int), "upward_preferred_2");
	klee_make_symbolic(&alim_Non_Crossing_Biased_Descend, sizeof(signed int), "alim_Non_Crossing_Biased_Descend");
	klee_make_symbolic(&temp21, sizeof(signed int), "temp21");
	klee_make_symbolic(&temp22, sizeof(signed int), "temp22");
	klee_make_symbolic(&temp23, sizeof(signed int), "temp23");
	
	upward_preferred_2 = 0 ;
	result_Non_Crossing_Biased_Descend = 0 ;
	

	
	if ( Alt_Layer_Value == 0 ){
	  alim_Non_Crossing_Biased_Descend= Positive_RA_Alt_Thresh__0 ;
	  
	}  
	if ( Alt_Layer_Value == 1 ){
	  alim_Non_Crossing_Biased_Descend= Positive_RA_Alt_Thresh__1 ;
	  
	}  
	if ( Alt_Layer_Value == 2 ){
	  alim_Non_Crossing_Biased_Descend= Positive_RA_Alt_Thresh__2 ;
	    
	}  
	alim_Non_Crossing_Biased_Descend= Positive_RA_Alt_Thresh__3 ;
	
	

	if (Climb_Inhibit==1) {
	  temp21 = Up_Separation + 100;
	  
	}else{ 
	  temp21 = Up_Separation;
	  
	}  
	
	if ( temp21 > Down_Separation ){
	  upward_preferred_2 = 1 ;
	  
	}  
	if (upward_preferred_2 ==1)
	  {
	    
	        if (Own_Tracked_Alt < Other_Tracked_Alt){
		  temp22 = 1 ;
		}else{ temp22 = 0;}
		
		if ((temp22 !=0 ) && (Cur_Vertical_Sep >= 300) && (Down_Separation >= alim_Non_Crossing_Biased_Descend) ){
	      result_Non_Crossing_Biased_Descend = 1 ;
	      
	      }
	  }
	else
	  {
	    
	    if (Other_Tracked_Alt < Own_Tracked_Alt){
	      temp23 = 1 ;
	    }else{
	      temp23 = 0 ;
	    }  
	     printf("the value is %d \n",temp23);
	    if (!(temp23 !=0 ) || ((temp23 !=0 ) && (Up_Separation >= alim_Non_Crossing_Biased_Descend))){
	      result_Non_Crossing_Biased_Descend = 1 ;
	      
	    }  
	  }
	
      } 
      temp3= result_Non_Crossing_Biased_Descend;
      
      
      if (Other_Tracked_Alt < Own_Tracked_Alt){
	temp4 =  1 ;
      }else{ temp4 = 0 ;}
      if ( (temp3 !=0 ) && (temp4 !=0 ) ){
	need_downward_RA = 1 ;
      }	
      if ((need_upward_RA !=0) && (need_downward_RA !=0 )){
	alt_sep = 0;
      }else if ((need_upward_RA !=0 )){
	alt_sep = 1;
      }else if ((need_downward_RA !=0 ))
        {
	  
	  alt_sep = 2;
	  
        }
        else{
	  alt_sep = 0;
	  
	}  
    }
  return 0;

}
